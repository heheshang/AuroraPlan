name: Rust

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  CARGO_TERM_COLOR: always

jobs:
  # build-db:
  #     strategy:
  #       matrix:
  #           platform: [ubuntu-latest]
  #     runs-on: ${{ matrix.platform }}
  #     services:
  #       postgres:
  #         image: postgres:14.5
  #         env:
  #           POSTGRES_USER: superset
  #           POSTGRES_PASSWORD: superset
  #           POSTGRES_DB: Aurorascheduler
  #         ports:
  #           - 16432:5432
  #         # Set health checks to wait until postgres has started
  #         options: >-
  #           --health-cmd pg_isready
  #           --health-interval 10s
  #           --health-timeout 5s
  #           --health-retries 5   
  build-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: default config.toml
        run: sed -i 's/replace-with/#replace-with/g' .cargo/config.toml
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install cargo fmt
        run: rustup component add rustfmt
      - name: Install cargo clippy
        run: rustup component add clippy

      # - name: Install sea-orm-cli
      #   run: cargo install sea-orm-cli
      - uses: Swatinem/rust-cache@v2
      - name: Check code format
        run: cargo fmt -- --check
      - name: Check the package for errors
        run: cargo check --all
      - name: Lint rust sources
        # run: cargo clippy --all-targets --all-features --tests --benches -- -D warnings
        run: cargo clippy --all-targets -F cn_msg --tests --benches -- -D warnings
      # - name: Execute migration 
      #   # run: cargo nextest run --all-features
      #   run: cargo run -p migration
      # - name: budild docker image
      #   run: docker build . --file Dockerfile --tag AuroraPlan:lastest
      # - name: run aurora-service
      #   # run: cargo nextest run --all-features
      #   run: cargo run -p aurora-service --bin server
      # - name: run aurora-api
      #   # run: cargo nextest run --all-features
      #   run: cargo run -p aurora-api 
      # - name: Execute rust tests
        # run: cargo nextest run --all-features
        # run: cargo nextest run -F cn_msg
  deploy_and_test:
    needs: [ build-rust]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # - name: Install Docker
        # uses: docker/setup-docker@v1
      # - name: Build and push
        # uses: docker/build-push-action@v2
        # with:
        #     context: .
        #     file: ./Dockerfile
        #     push: true
        #     tags: aurora-plan:latest
      
      # docker-compose up -
      - name: default config.toml
        run: sed -i 's/replace-with/#replace-with/g' .cargo/config.toml
      - name: Clean The Workspace 
        run: cargo clean 

      - name: Build the stack
        run: docker-compose build 
      - name: run the stack
        run: docker-compose up -d
      - name: Check docker container status
        run: docker ps -a
      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov 
      # - name: install nextest
      #   uses: taiki-e/install-action@nextest
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      # - name: modify hosts
      #   run: sudo echo "127.0.0.1  aurora-service aurora-postgres" >> /etc/hosts
      - name: Print test LOG
      #   # run: cargo nextest run --all-features
        run: docker logs  aurora-test
      - name: Execute example 
        # run: cargo nextest run --all-features
        run: cargo run -p aurora-api --example quick_dev
  # build-migraions:
  #   needs: [ deploy]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Execute migration 
  #       # run: cargo nextest run --all-features
  #       run: cargo run -p migration
  # build-test:
  #   needs: [ build-rust,deploy,build-migraions]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Execute rust tests
  #       # run: cargo nextest run --all-features
  #       run: cargo nextest run -F cn_msg