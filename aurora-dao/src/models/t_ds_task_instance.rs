use chrono::NaiveDateTime;
use diesel::prelude::*;

#[derive(Clone, Debug, PartialEq, Queryable, Selectable, Identifiable, Default)]
#[diesel(check_for_backend(diesel::pg::Pg))]
#[diesel(table_name = crate::schema::t_ds_task_instance)]
pub struct Model {
    pub id: i32,
    pub name: Option<String>,
    pub task_type: Option<String>,
    pub task_execute_type: Option<i32>,
    pub task_code: i64,
    pub task_definition_version: Option<i32>,
    pub process_instance_id: Option<i32>,
    pub process_instance_name: Option<String>,
    pub project_code: Option<i64>,
    pub state: Option<i32>,
    pub submit_time: Option<NaiveDateTime>,
    pub start_time: Option<NaiveDateTime>,
    pub end_time: Option<NaiveDateTime>,
    pub host: Option<String>,
    pub execute_path: Option<String>,
    pub log_path: Option<String>,
    pub alert_flag: Option<i32>,
    pub retry_times: Option<i32>,
    pub pid: Option<i32>,
    pub app_link: Option<String>,
    pub task_params: Option<String>,
    pub flag: Option<i32>,
    pub is_cache: Option<i32>,
    pub cache_key: Option<String>,
    pub retry_interval: Option<i32>,
    pub max_retry_times: Option<i32>,
    pub task_instance_priority: Option<i32>,
    pub worker_group: Option<String>,
    pub environment_code: Option<i64>,
    pub environment_config: Option<String>,
    pub executor_id: Option<i32>,
    pub executor_name: Option<String>,
    pub first_submit_time: Option<NaiveDateTime>,
    pub delay_time: Option<i32>,
    pub task_group_id: Option<i32>,
    pub var_pool: Option<String>,
    pub dry_run: Option<i32>,
    pub cpu_quota: i32,
    pub memory_max: i32,
    pub test_flag: Option<i32>,
}
