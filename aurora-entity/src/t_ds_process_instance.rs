//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "t_ds_process_instance")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: Option<String>,
    pub process_definition_code: Option<i64>,
    pub process_definition_version: Option<i32>,
    pub project_code: Option<i64>,
    pub state: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub state_history: Option<String>,
    pub recovery: Option<i32>,
    pub start_time: Option<DateTime>,
    pub end_time: Option<DateTime>,
    pub run_times: Option<i32>,
    pub host: Option<String>,
    pub command_type: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub command_param: Option<String>,
    pub task_depend_type: Option<i32>,
    pub max_try_times: Option<i32>,
    pub failure_strategy: Option<i32>,
    pub warning_type: Option<i32>,
    pub warning_group_id: Option<i32>,
    pub schedule_time: Option<DateTime>,
    pub command_start_time: Option<DateTime>,
    #[sea_orm(column_type = "Text", nullable)]
    pub global_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub process_instance_json: Option<String>,
    pub flag: Option<i32>,
    pub update_time: Option<DateTime>,
    pub is_sub_process: Option<i32>,
    pub executor_id: i32,
    pub executor_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub history_cmd: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub dependence_schedule_times: Option<String>,
    pub process_instance_priority: Option<i32>,
    pub worker_group: Option<String>,
    pub environment_code: Option<i64>,
    pub timeout: Option<i32>,
    pub tenant_code: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub var_pool: Option<String>,
    pub dry_run: Option<i32>,
    pub next_process_instance_id: Option<i32>,
    pub restart_time: Option<DateTime>,
    pub test_flag: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
