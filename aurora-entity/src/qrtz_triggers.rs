//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "qrtz_triggers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub sched_name: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub trigger_name: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub trigger_group: String,
    pub job_name: String,
    pub job_group: String,
    pub description: Option<String>,
    pub next_fire_time: Option<i64>,
    pub prev_fire_time: Option<i64>,
    pub priority: Option<i32>,
    pub trigger_state: String,
    pub trigger_type: String,
    pub start_time: i64,
    pub end_time: Option<i64>,
    pub calendar_name: Option<String>,
    pub misfire_instr: Option<i16>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub job_data: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
